import org.sireum.logika._

// Given non-negative integer arguments m and n,
// mult computes multiplication of m and n by using repeated addition.
def mult(m: Z, n: Z): Z = {
  l"""{
    requires  m ≥ 0 ∧ n ≥ 0      // call this Pre below
    ensures   result == m * n    // call this Post below
  }"""

  // Assume: Pre
  var r: Z = 0
  var i: Z = 0

  println("Before loop: m = ", m, ", n = ,", n, ", i = ", i, ", r = ", r)

  // B is i < n (continuation condition)
  // I is r == m * i
  //
  // Guarantee: prove I holds
  l"""{ 1. r == 0                  premise
        2. i == 0                  premise
        3. r == m * i              algebra 1 2 }"""
  while (i != n) {
    l"""{ invariant r == m * i
          modifies r, i                        }"""

    // Assume: I, B hold
    println("Loop pre: m = ", m, ", n = ", n, ", i = ", i, ", r = ", r)

    r = r + m
    l"""{ 1. r == r_old + m        premise // from assignment
          2. r_old == m * i        premise // from loop invariant
          3. r == m * i + m        subst1 2 1  }"""
    i = i + 1
    l"""{ 1. i == i_old + 1        premise
          2. r == m * i_old + m    premise
          3. r == m * i            algebra 1 2 }"""
    // Guarantee: I holds

    println("Loop post: m = ", m, ", n = ", n, ", i = ", i, ", r = ", r)
  }

  println("After loop: m = ", m, ", n = ", n, ", i = ", i, ", r = ", r)

  // Assume: I and ¬(B) hold
  // Guarantee: Post
  l"""{ 1. ¬(i ≠ n)                premise // from loop condition
        2. r == m * i              premise // from loop invariant
        3. r == m * n              algebra 1 2 }"""
  return r
}