import org.sireum.logika._

// Given a non-negative integer argument n,
// factorial computes n!, where n! is defined as follows
//   0! == 1
//   1! == 1 * 0!
//   2! == 2 * 1!
//   …
//   n! == n * (n – 1)!     (if n > 0)

l"""{
  fact // axioms
    def f(x: Z): Z
      = 1,            if x == 0    (fZero)
      = f(x - 1) * x, if x > 0     (fPos)
}"""

def factorial(n: Z): Z = {
  // Goal: return 1 * 2 * 3 * … * n

  l"""{ requires n ≥ 0
        ensures result == f(n)                       }"""
  var r: Z = 1
  var i: Z = 0
  l"""{ 1. r == 1                      premise
        2. i == 0                      premise
        3. n ≥ 0                       premise
        4. ∀x: Z  x == 0 → f(x) == 1   fact fZero
        5. i == 0 → f(i) == 1          ∀e 4 i
        6. f(i) == 1                   →e 5 2
        7. r == f(i)                   algebra 1 6
        8. i ≥ 0                       algebra 2
        9. i ≤ n                       algebra 3 2   }"""
  while (i < n) {
    l"""{ invariant r == f(i)
                    i ≥ 0
                    i ≤ n
          modifies r, i }"""
    i = i + 1
    l"""{ 1. i == i_old + 1            premise
          2. r == f(i_old)             premise
          3. i_old ≥ 0                 premise
          5. i_old < n                 premise
          6. r == f(i - 1)             algebra 1 2
          7. i > 0                     algebra 1 3
          8. i ≤ n                     algebra 5 1   }"""
    r = r * i
    l"""{ 1. r == r_old * i            premise
          2. r_old == f(i - 1)         premise
          3. i > 0                     premise
          4. i ≥ 0                     algebra 3
          5. r == f(i - 1) * i         algebra 1 2
          6. ∀x: Z  x > 0 →
               f(x) == f(x - 1) * x    fact fPos
          7. i > 0 →
               f(i) == f(i - 1) * i    ∀e 6 i
          8. f(i) == f(i - 1) * i      →e 7 3
          9. r == f(i)                 subst2 8 5    }"""
  }
  l"""{ 1. r == f(i)                   premise
        2. ¬(i < n)                    premise
        3. i ≤ n                       premise
        4. r == f(n)                   algebra 1 2 3 }"""
  return r
}