import org.sireum.logika._

def squareRec(a: ZS, i: Z): Unit = {
  l"""{ requires 0 ≤ i
        modifies a
        ensures  ∀j: (i ..< a.size) a(j) == a_in(j) * a_in(j)
                 ∀j: (0 ..< i)      j < a.size → a(j) == a_in(j)
                 a.size == a_in.size                             }"""

  // decreases  a.size - i

  val decreasesPre: Z = a.size - i

  if (i < a.size) {
    a(i) = a(i) * a(i)

    val decreasesRec: Z = a.size - (i + 1)

    assert(decreasesRec < decreasesPre)
    assert(decreasesPre > 0)

    squareRec(a, i + 1)
  }
}