import org.sireum.logika._

l"""{
  fact
    def countTill(zs: ZS, x: Z, j: Z): Z
    c0.  ∀zs: ZS  ∀x: Z
           countTill(zs, x, 0) == 0
    cEq. ∀zs: ZS  ∀x: Z  ∀j: Z
           j ≥ 1 ∧ zs(j - 1) ≠ x →
             countTill(zs, x, j) == countTill(zs, x, j - 1)
    cNe. ∀zs: ZS  ∀x: Z  ∀j: Z
           j ≥ 1 ∧ zs(j - 1) == x →
             countTill(zs, x, j) == countTill(zs, x, j - 1) + 1

    def count(zs: ZS, x: Z): Z
    ct.  ∀zs: ZS  ∀x: Z  count(zs, x) == countTill(zs, x, zs.size)
}"""

def countN(a: ZS, n: Z): Z = {
  l"""{ ensures result == count(a, n)  }"""
  var r: Z = 0
  var i: Z = 0
  while (i < a.size) {
    l"""{ invariant 0 ≤ i
                    i ≤ a.size
                    r == countTill(a, n, i)
          modifies i, r                            }"""
    if (a(i) == n) {
      r = r + 1
      l"""{ 1. r == countTill(a, n, i) + 1    auto }"""
    }
    i = i + 1
  }
  return r
}

val a: ZS = ZS(1, 1, 3)
val r: Z = countN(a, 1)
assert(r == 2)