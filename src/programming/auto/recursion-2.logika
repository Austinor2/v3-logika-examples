import org.sireum.logika._

l"""{
  fact // axioms
    def f(n: Z): Z
    fZero. f(0) == 1
    fPos.  ∀x: Z  x > 0 → f(x) == f(x - 1) * x
}"""

def factorialRec(n: Z): Z = {
  l"""{ requires n ≥ 0
        ensures  result == f(n) }"""

  var r: Z = 1
  if (n != 0) {
    l"""{ 1. n - 1 ≥ 0                              auto          }"""
    r = factorialRec(n - 1)
    l"""{ 1. r == f(n - 1)                          premise       }"""
    r = r * n
    l"""{ 1. r == f(n - 1) * n                      auto
          2. ∀x: Z  x > 0 → f(x) == f(x - 1) * x    fact fPos
          3. f(n) == f(n - 1) * n                   auto
          4. r == f(n)                              subst2 3 1    }"""
  } else {
    l"""{ 1. f(0) == 1                              fact fZero
          4. r == f(n)                              auto          }"""
  }
  return r
}
